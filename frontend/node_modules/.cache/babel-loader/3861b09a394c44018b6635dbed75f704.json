{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\henry\\\\source\\\\interpreter-demo\\\\frontend\\\\src\\\\App.js\";\nimport React from 'react';\nimport Editor from 'react-simple-code-editor';\nimport { highlight, languages } from 'prismjs/components/prism-core';\nimport 'prismjs/components/prism-clike';\nimport 'prismjs/components/prism-javascript';\nimport 'prismjs/components/prism-markup';\nimport 'prismjs/components/prism-python';\nimport styles from './App.css'; // Import Components\n\nimport OutputConsole from './components/OutputConsole';\nimport Header from './components/Header';\nimport REPL from './components/REPL';\nimport socketIOClient from \"socket.io-client\";\nconst ENDPOINT = \"http://localhost:5001\";\nconst tempcode = `# fib(n) recursively computes the n-th fibonacci number\n# fib: Nat -> Nat\nbind fib = lambda({n} -> \n  if(<=(n 1)\n    n\n    +(fib(-(n 1)) \n      fib(-(n 2)))));\n\n# function evaluation\nfib(0);\nfib(5);\nfib(10);`;\nconst tempout = `Welcome to The λ Interpreter [version 0.1].\\nλ `;\n\nfunction highcust(program) {\n  var temp = highlight(program, languages.python);\n  temp = temp.replace('bind', '<span class=\"token keyword\">bind</span>');\n  temp = temp.replace('local', '<span class=\"token keyword\">local</span>');\n  temp = temp.replace('load', '<span class=\"token keyword\">load</span>');\n  temp = temp.replace('λ', '<span class=\"token keyword\">λ</span>');\n  return temp;\n}\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      code: tempcode,\n      output: tempout,\n      response: ''\n    };\n  }\n\n  componentDidMount() {\n    console.log('App mounted. Creating Socket');\n    const socket = socketIOClient(ENDPOINT); // setup message handler\n\n    socket.on(\"msg_repl\", data => {\n      console.log(data); // update state\n\n      this.setState({\n        response: this.state.response + data\n      });\n    }); // test message\n\n    socket.emit('msg_client', 'Client Message');\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(REPL, {\n      log: this.state.response\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 12\n    }, this);\n  }\n  /*\n  constructor(props) {\n    super(props)\n     // console.log(highlight(tempcode))\n     this.execute = this.execute.bind(this);\n    this.reset = this.reset.bind(this); \n  }\n   execute() {\n    // send POST request\n    fetch('http://localhost:5000/api', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        code: this.state.code\n      })\n    })\n    .then((res) => res.json())\n    .then((json) => {\n      console.log(\"Program Output: \" + (json.err ? \"Failure\" : \"Success\"))\n      console.log(json.output)\n      this.setState({ code: this.state.code, \n        output: tempout + 'interperter input.lang\\n' + json.output })\n    })\n  }\n   reset() {\n    this.setState({ code: tempcode, output: tempout })\n  }\n   render() {\n    //console.log(highlight(this.state.code, languages.js));\n    return (\n      <div className=\"container full-height\">\n         <Header execute={this.execute} reset={this.reset} />\n         <div className=\"row fluid-height\">\n          <div className=\"col-lg-6\">\n            <div className=\"code-area\">\n              <Editor \n                className=\"code-editor\"\n                value={this.state.code}\n                onValueChange={code => this.setState({ code })}\n                highlight={code => highcust(code)}\n                padding={10}\n                style={{\n                  fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\n                  fontSize: 12,\n                }}\n              />\n            </div>\n          </div>\n           <OutputConsole output={this.state.output}/>\n            \n        </div>\n      </div>\n    );\n  }\n  */\n\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/henry/source/interpreter-demo/frontend/src/App.js"],"names":["React","Editor","highlight","languages","styles","OutputConsole","Header","REPL","socketIOClient","ENDPOINT","tempcode","tempout","highcust","program","temp","python","replace","App","Component","state","code","output","response","componentDidMount","console","log","socket","on","data","setState","emit","render"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAAQC,SAAR,EAAmBC,SAAnB,QAAmC,+BAAnC;AACA,OAAO,gCAAP;AACA,OAAO,qCAAP;AACA,OAAO,iCAAP;AACA,OAAO,iCAAP;AAEA,OAAOC,MAAP,MAAmB,WAAnB,C,CAEA;;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AAEA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,MAAMC,QAAQ,GAAG,uBAAjB;AAIA,MAAMC,QAAQ,GACb;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAZA;AAcA,MAAMC,OAAO,GACZ,iDADD;;AAIA,SAASC,QAAT,CAAkBC,OAAlB,EAA2B;AACzB,MAAIC,IAAI,GAAGZ,SAAS,CAACW,OAAD,EAAUV,SAAS,CAACY,MAApB,CAApB;AACAD,EAAAA,IAAI,GAAGA,IAAI,CAACE,OAAL,CAAa,MAAb,EAAqB,yCAArB,CAAP;AACAF,EAAAA,IAAI,GAAGA,IAAI,CAACE,OAAL,CAAa,OAAb,EAAsB,0CAAtB,CAAP;AACAF,EAAAA,IAAI,GAAGA,IAAI,CAACE,OAAL,CAAa,MAAb,EAAqB,yCAArB,CAAP;AACAF,EAAAA,IAAI,GAAGA,IAAI,CAACE,OAAL,CAAa,GAAb,EAAkB,sCAAlB,CAAP;AACA,SAAOF,IAAP;AACD;;AAED,MAAMG,GAAN,SAAkBjB,KAAK,CAACkB,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAEhCC,KAFgC,GAExB;AACNC,MAAAA,IAAI,EAAEV,QADA;AAENW,MAAAA,MAAM,EAAEV,OAFF;AAGNW,MAAAA,QAAQ,EAAE;AAHJ,KAFwB;AAAA;;AAQhCC,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACA,UAAMC,MAAM,GAAGlB,cAAc,CAACC,QAAD,CAA7B,CAFkB,CAIlB;;AACAiB,IAAAA,MAAM,CAACC,EAAP,CAAU,UAAV,EAAsBC,IAAI,IAAI;AAC5BJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,IAAZ,EAD4B,CAE5B;;AAEA,WAAKC,QAAL,CAAc;AAACP,QAAAA,QAAQ,EAAE,KAAKH,KAAL,CAAWG,QAAX,GAAsBM;AAAjC,OAAd;AAED,KAND,EALkB,CAalB;;AACAF,IAAAA,MAAM,CAACI,IAAP,CAAY,YAAZ,EAA0B,gBAA1B;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,wBAAO,QAAC,IAAD;AAAM,MAAA,GAAG,EAAE,KAAKZ,KAAL,CAAWG;AAAtB;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AArFkC;;AAgGlC,eAAeL,GAAf","sourcesContent":["import React from 'react';\nimport Editor from 'react-simple-code-editor';\nimport {highlight, languages} from 'prismjs/components/prism-core';\nimport 'prismjs/components/prism-clike';\nimport 'prismjs/components/prism-javascript';\nimport 'prismjs/components/prism-markup';\nimport 'prismjs/components/prism-python'\n\nimport styles from './App.css'\n\n// Import Components\nimport OutputConsole from './components/OutputConsole'\nimport Header from './components/Header'\nimport REPL from './components/REPL'\n\nimport socketIOClient from \"socket.io-client\";\nconst ENDPOINT = \"http://localhost:5001\";\n\n\n\nconst tempcode = \n`# fib(n) recursively computes the n-th fibonacci number\n# fib: Nat -> Nat\nbind fib = lambda({n} -> \n  if(<=(n 1)\n    n\n    +(fib(-(n 1)) \n      fib(-(n 2)))));\n\n# function evaluation\nfib(0);\nfib(5);\nfib(10);`;\n\nconst tempout = \n`Welcome to The λ Interpreter [version 0.1].\\nλ `\n\n\nfunction highcust(program) {\n  var temp = highlight(program, languages.python)\n  temp = temp.replace('bind', '<span class=\"token keyword\">bind</span>')\n  temp = temp.replace('local', '<span class=\"token keyword\">local</span>')\n  temp = temp.replace('load', '<span class=\"token keyword\">load</span>')\n  temp = temp.replace('λ', '<span class=\"token keyword\">λ</span>')\n  return temp\n}\n\nclass App extends React.Component {\n\n  state = { \n    code: tempcode, \n    output: tempout,\n    response: '',\n    };\n\n  componentDidMount() {\n    console.log('App mounted. Creating Socket')\n    const socket = socketIOClient(ENDPOINT);\n\n    // setup message handler\n    socket.on(\"msg_repl\", data => {\n      console.log(data)\n      // update state\n\n      this.setState({response: this.state.response + data})\n\n    });\n\n    // test message\n    socket.emit('msg_client', 'Client Message')\n  }\n\n  render() {\n    return <REPL log={this.state.response}/>\n  }\n  /*\n  constructor(props) {\n    super(props)\n\n    // console.log(highlight(tempcode))\n\n    this.execute = this.execute.bind(this);\n    this.reset = this.reset.bind(this); \n  }\n\n  execute() {\n    // send POST request\n    fetch('http://localhost:5000/api', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        code: this.state.code\n      })\n    })\n    .then((res) => res.json())\n    .then((json) => {\n      console.log(\"Program Output: \" + (json.err ? \"Failure\" : \"Success\"))\n      console.log(json.output)\n      this.setState({ code: this.state.code, \n        output: tempout + 'interperter input.lang\\n' + json.output })\n    })\n  }\n\n  reset() {\n    this.setState({ code: tempcode, output: tempout })\n  }\n\n  render() {\n    //console.log(highlight(this.state.code, languages.js));\n    return (\n      <div className=\"container full-height\">\n\n        <Header execute={this.execute} reset={this.reset} />\n\n        <div className=\"row fluid-height\">\n          <div className=\"col-lg-6\">\n            <div className=\"code-area\">\n              <Editor \n                className=\"code-editor\"\n                value={this.state.code}\n                onValueChange={code => this.setState({ code })}\n                highlight={code => highcust(code)}\n                padding={10}\n                style={{\n                  fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\n                  fontSize: 12,\n                }}\n              />\n            </div>\n          </div>\n\n          <OutputConsole output={this.state.output}/>\n            \n        </div>\n      </div>\n    );\n  }\n  */\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}