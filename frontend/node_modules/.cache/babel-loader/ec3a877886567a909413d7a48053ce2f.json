{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\henry\\\\source\\\\interpreter-demo\\\\frontend\\\\src\\\\App.js\";\nimport React from 'react';\nimport Editor from 'react-simple-code-editor';\nimport { highlight, languages } from 'prismjs/components/prism-core';\nimport 'prismjs/components/prism-clike';\nimport 'prismjs/components/prism-javascript';\nimport 'prismjs/components/prism-markup';\nimport 'prismjs/components/prism-python';\nimport styles from './App.css'; // Import Components\n\nimport OutputConsole from './components/OutputConsole';\nimport Header from './components/Header';\nconst tempcode = `# fib(n) recursively computes the n-th fibonacci number\n# fib: Nat -> Nat\nbind fib = lambda({n} -> \n  if(<=(n 1)\n    n\n    +(fib(-(n 1)) \n      fib(-(n 2))));\n\n# function evaluation\nfib(0);\nfib(5);\nfib(10);`;\nconst tempout = `Welcome to <Lang> Interpreter v0.1.`;\n\nfunction test(program) {\n  temp = highlight(program, languages.python);\n  return temp;\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props); // console.log(highlight(tempcode))\n\n    this.state = {\n      code: tempcode,\n      output: tempout\n    };\n    this.execute = this.execute.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n\n  execute() {\n    // send POST request\n    fetch('http://localhost:5000/api', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        code: this.state.code\n      })\n    }).then(res => res.json()).then(json => {\n      console.log(\"Program Output: \" + (json.err ? \"Failure\" : \"Success\"));\n      console.log(json.output);\n      this.setState({\n        code: this.state.code,\n        output: json.output\n      });\n    });\n  }\n\n  reset() {\n    this.setState({\n      code: tempcode,\n      output: this.state.output\n    });\n  }\n\n  render() {\n    //console.log(highlight(this.state.code, languages.js));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container full-height\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        execute: this.execute,\n        reset: this.reset\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row fluid-height\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-lg-6\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"code-area\",\n            children: /*#__PURE__*/_jsxDEV(Editor, {\n              className: \"code-editor\",\n              value: this.state.code,\n              onValueChange: code => this.setState({\n                code\n              }),\n              highlight: code => highlight(code, languages.py),\n              padding: 10,\n              style: {\n                fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\n                fontSize: 12\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(OutputConsole, {\n          output: this.state.output\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/henry/source/interpreter-demo/frontend/src/App.js"],"names":["React","Editor","highlight","languages","styles","OutputConsole","Header","tempcode","tempout","test","program","temp","python","App","Component","constructor","props","state","code","output","execute","bind","reset","fetch","method","headers","body","JSON","stringify","then","res","json","console","log","err","setState","render","py","fontFamily","fontSize"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Editor from 'react-simple-code-editor';\nimport {highlight, languages} from 'prismjs/components/prism-core';\nimport 'prismjs/components/prism-clike';\nimport 'prismjs/components/prism-javascript';\nimport 'prismjs/components/prism-markup';\nimport 'prismjs/components/prism-python'\n\nimport styles from './App.css'\n\n// Import Components\nimport OutputConsole from './components/OutputConsole'\nimport Header from './components/Header'\n\n\nconst tempcode = \n`# fib(n) recursively computes the n-th fibonacci number\n# fib: Nat -> Nat\nbind fib = lambda({n} -> \n  if(<=(n 1)\n    n\n    +(fib(-(n 1)) \n      fib(-(n 2))));\n\n# function evaluation\nfib(0);\nfib(5);\nfib(10);`;\n\nconst tempout = \n`Welcome to <Lang> Interpreter v0.1.`\n\n\n\nfunction test(program) {\n\n  temp = highlight(program, languages.python)\n\n  return temp\n}\n\n\nclass App extends React.Component {\n\n  state = { code: tempcode, output: tempout };\n  \n  constructor(props) {\n    super(props)\n\n    // console.log(highlight(tempcode))\n\n    this.execute = this.execute.bind(this);\n    this.reset = this.reset.bind(this); \n  }\n\n  execute() {\n    // send POST request\n    fetch('http://localhost:5000/api', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        code: this.state.code\n      })\n    })\n    .then((res) => res.json())\n    .then((json) => {\n      console.log(\"Program Output: \" + (json.err ? \"Failure\" : \"Success\"))\n      console.log(json.output)\n      this.setState({ code: this.state.code, output: json.output })\n    })\n  }\n\n  reset() {\n    this.setState({ code: tempcode, output: this.state.output })\n  }\n\n  render() {\n    //console.log(highlight(this.state.code, languages.js));\n    return (\n      <div className=\"container full-height\">\n\n        <Header execute={this.execute} reset={this.reset} />\n\n        <div className=\"row fluid-height\">\n          <div className=\"col-lg-6\">\n            <div className=\"code-area\">\n              <Editor \n                className=\"code-editor\"\n                value={this.state.code}\n                onValueChange={code => this.setState({ code })}\n                highlight={code => highlight(code, languages.py)}\n                padding={10}\n                style={{\n                  fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\n                  fontSize: 12,\n                }}\n              />\n            </div>\n          </div>\n\n          <OutputConsole output={this.state.output}/>\n            \n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}